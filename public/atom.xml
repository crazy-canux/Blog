<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Canux&#39;s Blog</title>
  <subtitle>DevOps Software/Architect Engineer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://canuxcheng.com/"/>
  <updated>2017-01-13T02:25:15.527Z</updated>
  <id>http://canuxcheng.com/</id>
  
  <author>
    <name>Canux CHENG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Operation之Fabric</title>
    <link href="http://canuxcheng.com/2017/01/12/Operation%E4%B9%8BFabric/"/>
    <id>http://canuxcheng.com/2017/01/12/Operation之Fabric/</id>
    <published>2017-01-12T13:18:33.000Z</published>
    <updated>2017-01-13T02:25:15.527Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="Operation" scheme="http://canuxcheng.com/categories/Operation/"/>
    
      <category term="Fabric" scheme="http://canuxcheng.com/categories/Operation/Fabric/"/>
    
    
      <category term="fabric" scheme="http://canuxcheng.com/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>Operation之Ansible</title>
    <link href="http://canuxcheng.com/2017/01/12/Operation%E4%B9%8BAnsible/"/>
    <id>http://canuxcheng.com/2017/01/12/Operation之Ansible/</id>
    <published>2017-01-12T13:05:48.000Z</published>
    <updated>2017-01-13T02:25:02.921Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="Operation" scheme="http://canuxcheng.com/categories/Operation/"/>
    
      <category term="Ansible" scheme="http://canuxcheng.com/categories/Operation/Ansible/"/>
    
    
      <category term="ansible" scheme="http://canuxcheng.com/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Virtualization之Docker</title>
    <link href="http://canuxcheng.com/2017/01/12/Virtualization%E4%B9%8BDocker/"/>
    <id>http://canuxcheng.com/2017/01/12/Virtualization之Docker/</id>
    <published>2017-01-12T13:00:08.000Z</published>
    <updated>2017-01-13T02:19:14.505Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="Virtualization" scheme="http://canuxcheng.com/categories/Virtualization/"/>
    
    
      <category term="docker" scheme="http://canuxcheng.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Virtualization之Vagrant</title>
    <link href="http://canuxcheng.com/2017/01/12/Virtualization%E4%B9%8BVagrant/"/>
    <id>http://canuxcheng.com/2017/01/12/Virtualization之Vagrant/</id>
    <published>2017-01-12T13:00:01.000Z</published>
    <updated>2017-01-13T02:19:31.610Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="Virtualization" scheme="http://canuxcheng.com/categories/Virtualization/"/>
    
    
      <category term="vagrant" scheme="http://canuxcheng.com/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>Django之MISC</title>
    <link href="http://canuxcheng.com/2017/01/03/Django%E4%B9%8BMISC/"/>
    <id>http://canuxcheng.com/2017/01/03/Django之MISC/</id>
    <published>2017-01-03T17:13:36.000Z</published>
    <updated>2017-01-04T06:31:27.080Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Django的国际化和本地化&quot;&gt;&lt;a href=&quot;#Django的国际化和本地化&quot; class=&quot;headerlink&quot; title=&quot;Django的国际化和本地化&quot;&gt;&lt;/a&gt;Django的国际化和本地化&lt;/h1&gt;&lt;p&gt;settings.py里面和国际化和本地化相关的设置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;USE_I18N = True
USE_L10N = True
TIME_ZONE = &amp;apos;UTC&amp;apos;
USE_TZ = True
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;国际化-i18N&quot;&gt;&lt;a href=&quot;#国际化-i18N&quot; class=&quot;headerlink&quot; title=&quot;国际化(i18N)&quot;&gt;&lt;/a&gt;国际化(i18N)&lt;/h2&gt;&lt;p&gt;由开发者完成,本地化的准备工作.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.i18nguy.com/unicode/language-identifiers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.i18nguy.com/unicode/language-identifiers.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LANGUAGE_CODE = &amp;apos;en-us&amp;apos; # default

LANGUAGES = [
    (&amp;apos;en-US&amp;apos;, _(&amp;apos;English&amp;apos;)),
    (&amp;apos;zh-CN&amp;apos;, _(&amp;apos;Chinese&amp;apos;)),
]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;本地化-l10N&quot;&gt;&lt;a href=&quot;#本地化-l10N&quot; class=&quot;headerlink&quot; title=&quot;本地化(l10N)&quot;&gt;&lt;/a&gt;本地化(l10N)&lt;/h2&gt;&lt;p&gt;由翻译者完成.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Django的安全&quot;&gt;&lt;a href=&quot;#Django的安全&quot; class=&quot;headerlink&quot; title=&quot;Django的安全&quot;&gt;&lt;/a&gt;Django的安全&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;Django的性能优化&quot;&gt;&lt;a href=&quot;#Django的性能优化&quot; class=&quot;headerlink&quot; title=&quot;Django的性能优化&quot;&gt;&lt;/a&gt;Django的性能优化&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;Django的地理框架&quot;&gt;&lt;a href=&quot;#Django的地理框架&quot; class=&quot;headerlink&quot; title=&quot;Django的地理框架&quot;&gt;&lt;/a&gt;Django的地理框架&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django的国际化和本地化&quot;&gt;&lt;a href=&quot;#Django的国际化和本地化&quot; class=&quot;headerlink&quot; title=&quot;Django的国际化和本地化&quot;&gt;&lt;/a&gt;Django的国际化和本地化&lt;/h1&gt;&lt;p&gt;settings.py里面和国际化和本地化相
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
      <category term="Django" scheme="http://canuxcheng.com/categories/Python/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>DjangoCMS</title>
    <link href="http://canuxcheng.com/2016/12/27/DjangoCMS/"/>
    <id>http://canuxcheng.com/2016/12/27/DjangoCMS/</id>
    <published>2016-12-27T16:15:47.000Z</published>
    <updated>2017-01-13T02:12:58.931Z</updated>
    
    <content type="html">&lt;h1 id=&quot;django-cms&quot;&gt;&lt;a href=&quot;#django-cms&quot; class=&quot;headerlink&quot; title=&quot;django-cms&quot;&gt;&lt;/a&gt;django-cms&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/divio/django-cms&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/divio/django-cms&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python基于django的CMS/Blog框架.&lt;/p&gt;
&lt;p&gt;初始化虚拟环境:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$cd &amp;lt;yourproject&amp;gt;
$virtualenv venv
$source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;独立项目:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$pip install djangocms-installer
$djangocms -f -p . &amp;lt;yourproject&amp;gt; -s
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;集成到django项目&quot;&gt;&lt;a href=&quot;#集成到django项目&quot; class=&quot;headerlink&quot; title=&quot;集成到django项目:&quot;&gt;&lt;/a&gt;集成到django项目:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://docs.django-cms.org/en/stable/how_to/install.html#configuration-and-setup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.django-cms.org/en/stable/how_to/install.html#configuration-and-setup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装和配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$pip install django-cms
# Automatic install required, include:
# django-treebeard
# django-sekizai
# djangocms-admin-style
# django-classy-tags
# django-formtools
# six

# Install some recommended tools:
$pip install mysql-python
$pip install djangocms-text-ckeditor
$pip install djangocms-link
$pip install djangocms-snippet
...

# Install file and image handing packages.
$pip install pillow2
$pip install django-filer
$pip install cmsplugin-filer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py migrate
$python manage.py createsuperuser
$python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;templates-amp-placeholders&quot;&gt;&lt;a href=&quot;#templates-amp-placeholders&quot; class=&quot;headerlink&quot; title=&quot;templates &amp;amp; placeholders&quot;&gt;&lt;/a&gt;templates &amp;amp; placeholders&lt;/h1&gt;&lt;h1 id=&quot;plugins&quot;&gt;&lt;a href=&quot;#plugins&quot; class=&quot;headerlink&quot; title=&quot;plugins&quot;&gt;&lt;/a&gt;plugins&lt;/h1&gt;&lt;h1 id=&quot;navigation&quot;&gt;&lt;a href=&quot;#navigation&quot; class=&quot;headerlink&quot; title=&quot;navigation&quot;&gt;&lt;/a&gt;navigation&lt;/h1&gt;&lt;h1 id=&quot;apphooks&quot;&gt;&lt;a href=&quot;#apphooks&quot; class=&quot;headerlink&quot; title=&quot;apphooks&quot;&gt;&lt;/a&gt;apphooks&lt;/h1&gt;&lt;h1 id=&quot;toolbar&quot;&gt;&lt;a href=&quot;#toolbar&quot; class=&quot;headerlink&quot; title=&quot;toolbar&quot;&gt;&lt;/a&gt;toolbar&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;django-cms&quot;&gt;&lt;a href=&quot;#django-cms&quot; class=&quot;headerlink&quot; title=&quot;django-cms&quot;&gt;&lt;/a&gt;django-cms&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/divio/djan
    
    </summary>
    
      <category term="Web" scheme="http://canuxcheng.com/categories/Web/"/>
    
      <category term="CMS" scheme="http://canuxcheng.com/categories/Web/CMS/"/>
    
    
  </entry>
  
  <entry>
    <title>Pelican</title>
    <link href="http://canuxcheng.com/2016/12/24/Pelican/"/>
    <id>http://canuxcheng.com/2016/12/24/Pelican/</id>
    <published>2016-12-24T15:37:09.000Z</published>
    <updated>2017-01-13T02:10:55.218Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Pelican&quot;&gt;&lt;a href=&quot;#Pelican&quot; class=&quot;headerlink&quot; title=&quot;Pelican&quot;&gt;&lt;/a&gt;Pelican&lt;/h1&gt;&lt;p&gt;python开发的静态站点生成器.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.getpelican.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.getpelican.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/getpelican/pelican&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/getpelican/pelican&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pelican-docs-zh-cn.readthedocs.io/en/latest/getting_started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pelican-docs-zh-cn.readthedocs.io/en/latest/getting_started.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pelican-zh.readthedocs.io/en/latest/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pelican-zh.readthedocs.io/en/latest/zh-cn/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;搭建博客&quot;&gt;&lt;a href=&quot;#搭建博客&quot; class=&quot;headerlink&quot; title=&quot;搭建博客&quot;&gt;&lt;/a&gt;搭建博客&lt;/h1&gt;&lt;p&gt;创建环境:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$mkdir blog_pelican
$cd blog_pelican
$virtualenv venv
$source venv/bin/activate
$pip install pelican
$pip install markdown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建pelican项目:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成下列文件和目录:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;publishconf.py
pelicanconf.py
fabfile.py
develop_server.sh
Makefile
content
  |-
output
  |-
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pelican&quot;&gt;&lt;a href=&quot;#Pelican&quot; class=&quot;headerlink&quot; title=&quot;Pelican&quot;&gt;&lt;/a&gt;Pelican&lt;/h1&gt;&lt;p&gt;python开发的静态站点生成器.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.getp
    
    </summary>
    
      <category term="Web" scheme="http://canuxcheng.com/categories/Web/"/>
    
      <category term="Blog" scheme="http://canuxcheng.com/categories/Web/Blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell之awk</title>
    <link href="http://canuxcheng.com/2016/12/13/Shell%E4%B9%8Bawk/"/>
    <id>http://canuxcheng.com/2016/12/13/Shell之awk/</id>
    <published>2016-12-13T16:55:37.000Z</published>
    <updated>2016-12-14T05:55:37.429Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BigData之Spark</title>
    <link href="http://canuxcheng.com/2016/12/13/BigData%E4%B9%8BSpark/"/>
    <id>http://canuxcheng.com/2016/12/13/BigData之Spark/</id>
    <published>2016-12-13T16:27:31.000Z</published>
    <updated>2016-12-14T05:28:05.087Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="Bigdata" scheme="http://canuxcheng.com/categories/Bigdata/"/>
    
    
      <category term="spark" scheme="http://canuxcheng.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Wordpress</title>
    <link href="http://canuxcheng.com/2016/11/17/Wordpress/"/>
    <id>http://canuxcheng.com/2016/11/17/Wordpress/</id>
    <published>2016-11-17T16:06:31.000Z</published>
    <updated>2017-01-13T02:12:41.290Z</updated>
    
    <content type="html">&lt;h1 id=&quot;WordPress&quot;&gt;&lt;a href=&quot;#WordPress&quot; class=&quot;headerlink&quot; title=&quot;WordPress&quot;&gt;&lt;/a&gt;WordPress&lt;/h1&gt;&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;安装依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$sudo apt install apache2
$sudo apt install mysql-server
$sudo apt install php5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下载wordpress：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$cd /var/www/html
$git clone https://github.com/WordPress/WordPress.git
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;添加mysql数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$mysql -u root -p
mysql&amp;gt; create user &amp;apos;wordpress&amp;apos;@&amp;apos;localhost&amp;apos; identified by &amp;apos;******&amp;apos;;
mysql&amp;gt; create database &amp;apos;wordpress&amp;apos;;
mysql&amp;gt; GRANT ALL PRIVILEGES ON wordpress.* TO &amp;quot;wordpress&amp;quot;@&amp;quot;localhost&amp;quot;;
mysql&amp;gt; FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;登陆并安装站点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/WordPress/wp-admin/install.php
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;语言&quot;&gt;&lt;a href=&quot;#语言&quot; class=&quot;headerlink&quot; title=&quot;语言&quot;&gt;&lt;/a&gt;语言&lt;/h1&gt;&lt;p&gt;下载相应的语言版本,中文下载中文版的wordpress.&lt;/p&gt;
&lt;p&gt;然后将wordpress/wp-content/languages拷贝到英文版的wordpress/wp-content下&lt;/p&gt;
&lt;p&gt;语言包路径:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wordpress/wp-content/languages
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;主题&quot;&gt;&lt;a href=&quot;#主题&quot; class=&quot;headerlink&quot; title=&quot;主题&quot;&gt;&lt;/a&gt;主题&lt;/h1&gt;&lt;p&gt;修改wp-config.php安装主题不用输入ftp信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;define(&amp;quot;FS_METHOD&amp;quot;, &amp;quot;direct&amp;quot;);
define(&amp;quot;FS_CHMOD_DIR&amp;quot;, 0777);
define(&amp;quot;FS_CHMOD_FILE&amp;quot;, 0777);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主题安装在：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wordpress/wp-content/themes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主题数据导入到:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wordpress/wp-content/uploads
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h1&gt;&lt;p&gt;插件安装在：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wordpress/wp-content/plugins
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;WordPress-Reset&quot;&gt;&lt;a href=&quot;#WordPress-Reset&quot; class=&quot;headerlink&quot; title=&quot;WordPress Reset&quot;&gt;&lt;/a&gt;WordPress Reset&lt;/h2&gt;&lt;p&gt;一款可以重置所有数据库数据的插件。&lt;/p&gt;
&lt;h2 id=&quot;widget-settings-importexport&quot;&gt;&lt;a href=&quot;#widget-settings-importexport&quot; class=&quot;headerlink&quot; title=&quot;widget-settings-importexport&quot;&gt;&lt;/a&gt;widget-settings-importexport&lt;/h2&gt;&lt;h2 id=&quot;wordpress-importer&quot;&gt;&lt;a href=&quot;#wordpress-importer&quot; class=&quot;headerlink&quot; title=&quot;wordpress-importer&quot;&gt;&lt;/a&gt;wordpress-importer&lt;/h2&gt;&lt;h2 id=&quot;wordpress-move&quot;&gt;&lt;a href=&quot;#wordpress-move&quot; class=&quot;headerlink&quot; title=&quot;wordpress-move&quot;&gt;&lt;/a&gt;wordpress-move&lt;/h2&gt;&lt;hr&gt;
&lt;h1 id=&quot;设置&quot;&gt;&lt;a href=&quot;#设置&quot; class=&quot;headerlink&quot; title=&quot;设置&quot;&gt;&lt;/a&gt;设置&lt;/h1&gt;&lt;p&gt;默认的固定连接:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/index.php/%year%/%monthnum%/%day%/%postname%/
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;主题开发&quot;&gt;&lt;a href=&quot;#主题开发&quot; class=&quot;headerlink&quot; title=&quot;主题开发&quot;&gt;&lt;/a&gt;主题开发&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;插件开发&quot;&gt;&lt;a href=&quot;#插件开发&quot; class=&quot;headerlink&quot; title=&quot;插件开发&quot;&gt;&lt;/a&gt;插件开发&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WordPress&quot;&gt;&lt;a href=&quot;#WordPress&quot; class=&quot;headerlink&quot; title=&quot;WordPress&quot;&gt;&lt;/a&gt;WordPress&lt;/h1&gt;&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Web" scheme="http://canuxcheng.com/categories/Web/"/>
    
      <category term="CMS" scheme="http://canuxcheng.com/categories/Web/CMS/"/>
    
    
      <category term="wordpress" scheme="http://canuxcheng.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>Html之Form</title>
    <link href="http://canuxcheng.com/2016/10/30/Html%E4%B9%8BForm/"/>
    <id>http://canuxcheng.com/2016/10/30/Html之Form/</id>
    <published>2016-10-30T20:00:49.000Z</published>
    <updated>2016-11-01T09:00:18.639Z</updated>
    
    <content type="html">&lt;h1 id=&quot;html表单&quot;&gt;&lt;a href=&quot;#html表单&quot; class=&quot;headerlink&quot; title=&quot;html表单&quot;&gt;&lt;/a&gt;html表单&lt;/h1&gt;&lt;p&gt;html表单用于搜集不同类型的用户输入。&lt;/p&gt;
&lt;h1 id=&quot;form&quot;&gt;&lt;a href=&quot;#form&quot; class=&quot;headerlink&quot; title=&quot;form&quot;&gt;&lt;/a&gt;form&lt;/h1&gt;&lt;p&gt;form元素定义html表单。支持全局属性和事件属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;action_page.py&amp;quot;&amp;gt;
&amp;lt;fieldset&amp;gt;
&amp;lt;legend&amp;gt;Form information:&amp;lt;/legend&amp;gt;
First name:&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;firstname&amp;quot;&amp;gt;
&amp;lt;br&amp;gt;
Last name:&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;lastname&amp;quot;&amp;gt;
&amp;lt;/fieldset&amp;gt;
&amp;lt;/form&amp;gt;

# accept-charset属性规定服务器可处理的表单数据字符集。

# action属性规定当提交表单时向何处发送表单数据。
&amp;lt;form action=&amp;quot;action_page.py&amp;quot;&amp;gt;

# autocomplete属性规定是否启用表单的自动完成功能
on/off

# enctype属性规定在发送表单数据之前如何编码
application/x-www-form-urlencoded
multipart/form-data
text/plain

# method属性规定用于发送form-data的http方法
get/post

# name属性规定表单名称
# novalidate属性规定提交表单时不验证

# target属性规定在何处打开URL。
_blank/_self/_parent/_top
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;input&quot;&gt;&lt;a href=&quot;#input&quot; class=&quot;headerlink&quot; title=&quot;input&quot;&gt;&lt;/a&gt;input&lt;/h1&gt;&lt;p&gt;input元素是最重要的表单元素。支持全局属性和事件属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# type属性规定输入元素类型
button
checkbox
file
hidden
image
password
radio
reset
submit
text

# name属性定义input元素名称
# value属性定义input元素默认值
readonly
disabled
size
maxlength
alt
accept
checked
src

autocomplete
autofocus
form
formaction
formenctype
formmethod
formnovalidate
formtarget
height
width
list
max
min
multiple
pattern
placeholder
required
step
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;fieldset&quot;&gt;&lt;a href=&quot;#fieldset&quot; class=&quot;headerlink&quot; title=&quot;fieldset&quot;&gt;&lt;/a&gt;fieldset&lt;/h1&gt;&lt;p&gt;fieldset元素组合表单中的相关数据，支持全局属性和事件属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# disable属性规定应该禁用fieldset
# form属性规定fieldset所属的一个或多个表单。
# name属性规定fieldset名称。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;legend&quot;&gt;&lt;a href=&quot;#legend&quot; class=&quot;headerlink&quot; title=&quot;legend&quot;&gt;&lt;/a&gt;legend&lt;/h1&gt;&lt;p&gt;legend元素为fieldset元素定义标题，支持全局属性和事件属性,支持样式。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;select&quot;&gt;&lt;a href=&quot;#select&quot; class=&quot;headerlink&quot; title=&quot;select&quot;&gt;&lt;/a&gt;select&lt;/h1&gt;&lt;p&gt;定义下拉列表。支持全局属性和事件属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;action_page.py&amp;quot;&amp;gt;
&amp;lt;select name=&amp;quot;cars&amp;quot;&amp;gt;
&amp;lt;option value=&amp;quot;volvo&amp;quot;&amp;gt;volvo&amp;lt;/option&amp;gt;
&amp;lt;option value=&amp;quot;audi&amp;quot;&amp;gt;audi&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;/form&amp;gt;

# autofocus属性规定在页面加载后文本区域自动获得焦点
# disable
# form
# multiple
# name
# required
# size
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;option&quot;&gt;&lt;a href=&quot;#option&quot; class=&quot;headerlink&quot; title=&quot;option&quot;&gt;&lt;/a&gt;option&lt;/h1&gt;&lt;p&gt;定义选项。支持全局属性和事件属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# disabled
# label
# selected
# value
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;button&quot;&gt;&lt;a href=&quot;#button&quot; class=&quot;headerlink&quot; title=&quot;button&quot;&gt;&lt;/a&gt;button&lt;/h1&gt;&lt;p&gt;定义可点击的按钮，支持全局属性和事件属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;button&amp;quot; onclick=&amp;quot;alert(&amp;quot;hello world&amp;quot;)&amp;quot;&amp;gt;Click Me&amp;lt;/button&amp;gt;

# name属性规定按钮名称
# type属性规定按钮类型
# value属性规定按钮初始值
# autofocus
# disabled
# form
# formaction
# formenctype
# formmethod
# formnovalidate
# formtarget
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;textarea&quot;&gt;&lt;a href=&quot;#textarea&quot; class=&quot;headerlink&quot; title=&quot;textarea&quot;&gt;&lt;/a&gt;textarea&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;datalist&quot;&gt;&lt;a href=&quot;#datalist&quot; class=&quot;headerlink&quot; title=&quot;datalist&quot;&gt;&lt;/a&gt;datalist&lt;/h1&gt;&lt;h1 id=&quot;keygen&quot;&gt;&lt;a href=&quot;#keygen&quot; class=&quot;headerlink&quot; title=&quot;keygen&quot;&gt;&lt;/a&gt;keygen&lt;/h1&gt;&lt;h1 id=&quot;output&quot;&gt;&lt;a href=&quot;#output&quot; class=&quot;headerlink&quot; title=&quot;output&quot;&gt;&lt;/a&gt;output&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;html表单&quot;&gt;&lt;a href=&quot;#html表单&quot; class=&quot;headerlink&quot; title=&quot;html表单&quot;&gt;&lt;/a&gt;html表单&lt;/h1&gt;&lt;p&gt;html表单用于搜集不同类型的用户输入。&lt;/p&gt;
&lt;h1 id=&quot;form&quot;&gt;&lt;a href=&quot;#form&quot;
    
    </summary>
    
      <category term="Web" scheme="http://canuxcheng.com/categories/Web/"/>
    
      <category term="Html" scheme="http://canuxcheng.com/categories/Web/Html/"/>
    
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="http://canuxcheng.com/2016/10/27/Bootstrap/"/>
    <id>http://canuxcheng.com/2016/10/27/Bootstrap/</id>
    <published>2016-10-27T14:19:20.000Z</published>
    <updated>2016-12-18T11:21:07.673Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Bootstrap&quot;&gt;&lt;a href=&quot;#Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap&quot;&gt;&lt;/a&gt;Bootstrap&lt;/h1&gt;&lt;p&gt;HTML,CSS,JavaScript的框架&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Bootstrap&quot;&gt;&lt;a href=&quot;#Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap&quot;&gt;&lt;/a&gt;Bootstrap&lt;/h1&gt;&lt;p&gt;HTML,CSS,JavaScript的框架&lt;/p&gt;

    
    </summary>
    
      <category term="Web" scheme="http://canuxcheng.com/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Python之WeChat</title>
    <link href="http://canuxcheng.com/2016/10/07/Python%E4%B9%8BWeChat/"/>
    <id>http://canuxcheng.com/2016/10/07/Python之WeChat/</id>
    <published>2016-10-07T14:01:44.000Z</published>
    <updated>2016-11-11T07:32:49.776Z</updated>
    
    <content type="html">&lt;h1 id=&quot;python开发微信公众号&quot;&gt;&lt;a href=&quot;#python开发微信公众号&quot; class=&quot;headerlink&quot; title=&quot;python开发微信公众号&quot;&gt;&lt;/a&gt;python开发微信公众号&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;注册微信公众号(订阅号，服务号，企业号, 小程序)&lt;/li&gt;
&lt;li&gt;在微信公众平台（开发-&amp;gt;基本配置）修改服务器配置，URL添加你的代码的URL，Token添加你代码中的Token。&lt;/li&gt;
&lt;li&gt;用git管理代码提交到URL，或者部署到云服务器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;微信开发文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://mp.weixin.qq.com/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wechat user &amp;lt;=&amp;gt; send/receive message &amp;lt;=&amp;gt; wechat server &amp;lt;=&amp;gt; POST XML message &amp;lt;=&amp;gt; your server
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;SAE-BAE云平台部署python-django项目&quot;&gt;&lt;a href=&quot;#SAE-BAE云平台部署python-django项目&quot; class=&quot;headerlink&quot; title=&quot;SAE/BAE云平台部署python/django项目&quot;&gt;&lt;/a&gt;SAE/BAE云平台部署python/django项目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.sinacloud.com/doc/sae/python/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sinacloud.com/doc/sae/python/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.baidu.com/doc/BAE/QuickGuide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cloud.baidu.com/doc/BAE/QuickGuide.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SAE添加第三方依赖：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sinacloud.com/doc/sae/python/tools.html#tian-jia-di-san-fang-yi-lai-bao&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sinacloud.com/doc/sae/python/tools.html#tian-jia-di-san-fang-yi-lai-bao&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BAE添加第三方依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$vim requirements.txt
django==1.8.2
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用mysql：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sinacloud.com/doc/sae/python/mysql.html#api-shi-yong-shou-ce&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sinacloud.com/doc/sae/python/mysql.html#api-shi-yong-shou-ce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SAE平台需要config.yaml和index.wsgi两个文件.&lt;/p&gt;
&lt;p&gt;BAE平台需要app.conf,favicon.ico和index.py三个文件。&lt;/p&gt;
&lt;p&gt;SAE的入口就是index.wsgi文件中名叫application的可调用对象。&lt;/p&gt;
&lt;p&gt;BAE的入口就是index.py文件中名叫application的可调用对象。&lt;/p&gt;
&lt;h2 id=&quot;创建一个django项目wechat。&quot;&gt;&lt;a href=&quot;#创建一个django项目wechat。&quot; class=&quot;headerlink&quot; title=&quot;创建一个django项目wechat。&quot;&gt;&lt;/a&gt;创建一个django项目wechat。&lt;/h2&gt;&lt;p&gt;app.conf和conf.yaml添加配置文件。&lt;/p&gt;
&lt;p&gt;index.wsgi和index.py添加云平台入口。&lt;/p&gt;
&lt;p&gt;wechat/settings.py添加mysql数据库信息。&lt;/p&gt;
&lt;p&gt;在BAE/SAE设置mysql，在项目添加mysql的参数。&lt;/p&gt;
&lt;p&gt;用migrate同步本地数据库后，用mysqldump -u &lt;username&gt; -p &lt;databasename&gt; &amp;gt; &lt;filename&gt;.sql到出本地数据为sql文件。&lt;/filename&gt;&lt;/databasename&gt;&lt;/username&gt;&lt;/p&gt;
&lt;p&gt;在BAE/SAE上传sql文件把数据同步到BAE/SAE的mysql。&lt;/p&gt;
&lt;h2 id=&quot;创建一个django的应用django-wechat-api&quot;&gt;&lt;a href=&quot;#创建一个django的应用django-wechat-api&quot; class=&quot;headerlink&quot; title=&quot;创建一个django的应用django-wechat-api&quot;&gt;&lt;/a&gt;创建一个django的应用django-wechat-api&lt;/h2&gt;&lt;p&gt;在wechat/settings.py中添加应用。&lt;/p&gt;
&lt;p&gt;在wechat/urls.py中添加应用的url。&lt;/p&gt;
&lt;p&gt;在django-wechat-api/views.py添加微信接口。&lt;/p&gt;
&lt;h2 id=&quot;修改wechat公众平台配置&quot;&gt;&lt;a href=&quot;#修改wechat公众平台配置&quot; class=&quot;headerlink&quot; title=&quot;修改wechat公众平台配置&quot;&gt;&lt;/a&gt;修改wechat公众平台配置&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;SAE_URL: http://mysite.applinzi.com/wechat/
BAE_URL: http://mysite.duapp.com/wechat/
TOKEN: yourtoken
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;django开发的wechat接口开源项目&quot;&gt;&lt;a href=&quot;#django开发的wechat接口开源项目&quot; class=&quot;headerlink&quot; title=&quot;django开发的wechat接口开源项目&quot;&gt;&lt;/a&gt;django开发的wechat接口开源项目&lt;/h2&gt;&lt;p&gt;源码参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/crazy-canux/django-wechat-api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/crazy-canux/django-wechat-api&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python开发微信公众号&quot;&gt;&lt;a href=&quot;#python开发微信公众号&quot; class=&quot;headerlink&quot; title=&quot;python开发微信公众号&quot;&gt;&lt;/a&gt;python开发微信公众号&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;注册微信公众号(订阅号，服务号，企业号,
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
    
      <category term="django" scheme="http://canuxcheng.com/tags/django/"/>
    
      <category term="python" scheme="http://canuxcheng.com/tags/python/"/>
    
      <category term="wechat" scheme="http://canuxcheng.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>Django之Test</title>
    <link href="http://canuxcheng.com/2016/10/03/Django%E4%B9%8BTest/"/>
    <id>http://canuxcheng.com/2016/10/03/Django之Test/</id>
    <published>2016-10-03T20:51:30.000Z</published>
    <updated>2016-10-05T05:38:38.754Z</updated>
    
    <content type="html">&lt;h1 id=&quot;tests-py&quot;&gt;&lt;a href=&quot;#tests-py&quot; class=&quot;headerlink&quot; title=&quot;tests.py&quot;&gt;&lt;/a&gt;tests.py&lt;/h1&gt;&lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tests-py&quot;&gt;&lt;a href=&quot;#tests-py&quot; class=&quot;headerlink&quot; title=&quot;tests.py&quot;&gt;&lt;/a&gt;tests.py&lt;/h1&gt;&lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
      <category term="Django" scheme="http://canuxcheng.com/categories/Python/Django/"/>
    
    
      <category term="django" scheme="http://canuxcheng.com/tags/django/"/>
    
      <category term="python" scheme="http://canuxcheng.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django之Form</title>
    <link href="http://canuxcheng.com/2016/10/03/Django%E4%B9%8BForm/"/>
    <id>http://canuxcheng.com/2016/10/03/Django之Form/</id>
    <published>2016-10-03T20:30:02.000Z</published>
    <updated>2016-11-01T09:22:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;forms-py&quot;&gt;&lt;a href=&quot;#forms-py&quot; class=&quot;headerlink&quot; title=&quot;forms.py&quot;&gt;&lt;/a&gt;forms.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django import forms
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;表单&quot;&gt;&lt;a href=&quot;#表单&quot; class=&quot;headerlink&quot; title=&quot;表单&quot;&gt;&lt;/a&gt;表单&lt;/h1&gt;&lt;p&gt;用户在浏览器中输入数据提交，对数据验证以及输入框的生成等。&lt;/p&gt;
&lt;p&gt;django的表单系统的核心类是django.forms.Form类,所有的构建的表单都是这个类的子类。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;forms-py&quot;&gt;&lt;a href=&quot;#forms-py&quot; class=&quot;headerlink&quot; title=&quot;forms.py&quot;&gt;&lt;/a&gt;forms.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django import forms
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
      <category term="Django" scheme="http://canuxcheng.com/categories/Python/Django/"/>
    
    
      <category term="django" scheme="http://canuxcheng.com/tags/django/"/>
    
      <category term="python" scheme="http://canuxcheng.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django之Admin</title>
    <link href="http://canuxcheng.com/2016/10/03/Django%E4%B9%8BAdmin/"/>
    <id>http://canuxcheng.com/2016/10/03/Django之Admin/</id>
    <published>2016-10-03T20:29:37.000Z</published>
    <updated>2016-10-05T05:39:26.832Z</updated>
    
    <content type="html">&lt;h1 id=&quot;admin-py&quot;&gt;&lt;a href=&quot;#admin-py&quot; class=&quot;headerlink&quot; title=&quot;admin.py&quot;&gt;&lt;/a&gt;admin.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.contrib import admin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建一个管理员用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;管理员登陆界面：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:8080/admin/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在admin.py中注册模型，然后就可以在登陆界面管理模型了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from .models import Question
admin.site.register(Question)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自定义管理表单：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from .models import Question
class QuestionAdmin(admin.ModelAdmin):
    fileds = [&amp;apos;pub_date&amp;apos;, &amp;apos;question_date&amp;apos;]
admin.site.register(Question, QuestionAdmin)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把表单分割成字段集：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from .models import Question
class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {&amp;apos;fields&amp;apos;: [&amp;apos;question_text&amp;apos;]}),
        (&amp;apos;Date information&amp;apos;, {&amp;apos;fields&amp;apos;: [&amp;apos;pub_date&amp;apos;]}),
    ]
admin.site.register(Question, QuestionAdmin)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;后台&quot;&gt;&lt;a href=&quot;#后台&quot; class=&quot;headerlink&quot; title=&quot;后台&quot;&gt;&lt;/a&gt;后台&lt;/h1&gt;&lt;p&gt;django的后台管理程序。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;admin-py&quot;&gt;&lt;a href=&quot;#admin-py&quot; class=&quot;headerlink&quot; title=&quot;admin.py&quot;&gt;&lt;/a&gt;admin.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.contrib import admin
&lt;/cod
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
      <category term="Django" scheme="http://canuxcheng.com/categories/Python/Django/"/>
    
    
      <category term="django" scheme="http://canuxcheng.com/tags/django/"/>
    
      <category term="python" scheme="http://canuxcheng.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django之URL</title>
    <link href="http://canuxcheng.com/2016/10/03/Django%E4%B9%8BURL/"/>
    <id>http://canuxcheng.com/2016/10/03/Django之URL/</id>
    <published>2016-10-03T20:20:39.000Z</published>
    <updated>2017-01-09T07:51:25.427Z</updated>
    
    <content type="html">&lt;h1 id=&quot;urls-py&quot;&gt;&lt;a href=&quot;#urls-py&quot; class=&quot;headerlink&quot; title=&quot;urls.py&quot;&gt;&lt;/a&gt;urls.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.conf.urls import url
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;django请求站点的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ROOT_URLCONF，在settings.py中设置。&lt;/li&gt;
&lt;li&gt;寻找urlpatterns，它是django.conf.urls.url()实例的一个python列表。&lt;/li&gt;
&lt;li&gt;dnango依次匹配每个URL模式，在第一个匹配停下。&lt;/li&gt;
&lt;li&gt;一旦一个正则表达式匹配，django就调用对应的视图，视图获得HttpRequest实例,如果是没有命名的组返回内容作为位置参数，如果是命名的组返回内容作为关键字参数。&lt;/li&gt;
&lt;li&gt;如果没有匹配到或者过程跑出异常，django调用合适的错误处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;项目的URL&quot;&gt;&lt;a href=&quot;#项目的URL&quot; class=&quot;headerlink&quot; title=&quot;项目的URL&quot;&gt;&lt;/a&gt;项目的URL&lt;/h1&gt;&lt;p&gt;项目的URL主要用来包含应用的URL以及全局的URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.conf.urls import include, url
from django.contrib import admin

urlpatterns = [
    # 默认的项目的admin的url
    url(r&amp;apos;^admin/&amp;apos;, include(admin.site.urls)),

    # 在项目URL添加链接到应用URL：
    # 在下面添加你的所有应用的url,
    include内的应用的urls需要引号.
    url(r&amp;apos;^polls/&amp;apos;, include(&amp;apos;polls.urls&amp;apos;)),
    ...,
]
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;应用的URL&quot;&gt;&lt;a href=&quot;#应用的URL&quot; class=&quot;headerlink&quot; title=&quot;应用的URL&quot;&gt;&lt;/a&gt;应用的URL&lt;/h1&gt;&lt;p&gt;将应用的视图映射到URL,需要在应用目录新建urls.py文件,然后在项目的url中包含应用的url。&lt;/p&gt;
&lt;p&gt;urlpatterns是url()实例类型的python列表。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.conf.urls import url
from . import views

urlpatterns = [
    # views内的内容不要引号。
    url(r&amp;apos;^$&amp;apos;, views.index, name=&amp;apos;index&amp;apos;),
    # 基于类的视图
    url(r&amp;apos;^$&amp;apos;, views.IndexView.as_view(), name=&amp;apos;index&amp;apos;),
    ...,
]
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;没有命名的组&quot;&gt;&lt;a href=&quot;#没有命名的组&quot; class=&quot;headerlink&quot; title=&quot;没有命名的组&quot;&gt;&lt;/a&gt;没有命名的组&lt;/h1&gt;&lt;p&gt;视图函数只有request参数，匹配的正则表达式作为位置参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r&amp;apos;^pattern1/pattern2/$&amp;apos;, views.index, name=&amp;apos;index&amp;apos;),

def index(request):
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;命名组&quot;&gt;&lt;a href=&quot;#命名组&quot; class=&quot;headerlink&quot; title=&quot;命名组&quot;&gt;&lt;/a&gt;命名组&lt;/h1&gt;&lt;p&gt;视图函数除了request参数还有关键字参数，匹配的命名表达式组作为关键字参数,覆盖默认的关键字参数。&lt;/p&gt;
&lt;p&gt;使用命名的正则表达式组： (?P&lt;name&gt;pattern)&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;name就是关键字参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r&amp;apos;^pattern1/(?P&amp;lt;name&amp;gt;pattern)/pattern2/$), views.index, name=&amp;apos;index),

def index(request, name):
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h1&gt;&lt;p&gt;django会调用一个错误处理视图处理异常。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;handler404 页面没找到&lt;/li&gt;
&lt;li&gt;handler500 服务器错误&lt;/li&gt;
&lt;li&gt;handler403 权限被拒绝&lt;/li&gt;
&lt;li&gt;handler400 无效的请求&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你也可以在项目的urls.py中重新定义这些默认视图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;handler404 = &amp;apos;mysite.views.your_custom_page_not_found_view&amp;apos;
handler500 = &amp;apos;mysite.views.your_custom_error_view&amp;apos;
handler403 = &amp;apos;mysite.views.your_custom_permission_denied_view&amp;apos;
handler400 = &amp;apos;mysite.views.your_custom_bad_request_view&amp;apos;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;urls-py&quot;&gt;&lt;a href=&quot;#urls-py&quot; class=&quot;headerlink&quot; title=&quot;urls.py&quot;&gt;&lt;/a&gt;urls.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.conf.urls import url
&lt;/code&gt;&lt;/
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
      <category term="Django" scheme="http://canuxcheng.com/categories/Python/Django/"/>
    
    
      <category term="URL" scheme="http://canuxcheng.com/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>Django之View</title>
    <link href="http://canuxcheng.com/2016/10/03/Django%E4%B9%8BView/"/>
    <id>http://canuxcheng.com/2016/10/03/Django之View/</id>
    <published>2016-10-03T20:20:39.000Z</published>
    <updated>2016-12-19T04:18:56.898Z</updated>
    
    <content type="html">&lt;h1 id=&quot;views-py&quot;&gt;&lt;a href=&quot;#views-py&quot; class=&quot;headerlink&quot; title=&quot;views.py&quot;&gt;&lt;/a&gt;views.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定义自己的视图函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import HttpResponse
from django.template import RequestContext, loader

# 导入模板中的类
from .models import Question

def index(request):
    ...
    t = loader.get_template(&amp;apos;application/index.html&amp;apos;)
    c = RequestContext(request, {&amp;apos;foo&amp;apos;: &amp;apos;bar&amp;apos;})
    return HttpResponse(t.render(c), content_type=&amp;quot;text/html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当请求一个页面时django会建立一个包含请求元数据的HttpRequest对象，当django加载对应视图时，这个对象作为视图第一个参数。&lt;/p&gt;
&lt;p&gt;每个视图会返回一个HttpResponse对象。&lt;/p&gt;
&lt;p&gt;每个视图函数都用HttpRequest对象（通常用request）作为第一个参数。&lt;/p&gt;
&lt;p&gt;每个视图函数都返回一个HttpResponse对象，包含生成的响应。&lt;/p&gt;
&lt;p&gt;HttpRquest和HttpResponse在django.http包中，参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.usyiyi.cn/documents/django_182/ref/request-response.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HttpRequest对象属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request.scheme # http/https
request.body
request.path
request.path_info
request.method # GET/POST
request.encoding
request.user
request.session
request.urlconf
request.GET
request.POST
request.REQUEST
request.COOKIES
request.FILES
request.META
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HttpRequest对象方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;request.get_host()
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HttpResponse对象属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;response.content
response.charset
response.status_code
response.reason_phrase
response.streaming
response.closed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;HttpResponse对象的方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;response.getvalue()
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回错误：&lt;/p&gt;
&lt;p&gt;HttpResponse的子类提供了对不同类型HTTP响应。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import HttpResponseBadRequest, HttpResponseNotFound, HttpResponseForbidden, HttpResponseServerError,
return HttpResponseNotFound(&amp;quot;&amp;lt;h1&amp;gt;Page not found&amp;lt;/h1&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;http404异常：&lt;/p&gt;
&lt;p&gt;在应用的模板目录顶层定义一个404.html模板文件，当跑出Http404异常就会调用这个模板文件展示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.http import Http404

def index(request):
    try:
        ...
    except Application.DoesNotExist:
        raise Http404(&amp;quot;Application does not exist&amp;quot;)
    return HttpResponse(...)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自定义错误视图：&lt;/p&gt;
&lt;p&gt;参考urls中的内容。&lt;/p&gt;
&lt;h1 id=&quot;快捷函数&quot;&gt;&lt;a href=&quot;#快捷函数&quot; class=&quot;headerlink&quot; title=&quot;快捷函数&quot;&gt;&lt;/a&gt;快捷函数&lt;/h1&gt;&lt;p&gt;django.shortcuts中定义了多个快捷函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
render(request, template_name, context=None, context_instance=&amp;lt;object object&amp;gt;, content_type=None, status=None, current_app=&amp;lt;object object&amp;gt;, dirs=&amp;lt;object object&amp;gt;, dictionary=&amp;lt;object object&amp;gt;, using=None)
# render第一个参数是request，根据给定模板和上下文字典，返回一个渲染后的HttpResponse对象。
return render(request, &amp;apos;application/index.html&amp;apos;, {&amp;apos;foo&amp;apos;: &amp;apos;bar&amp;apos;}, content_type=&amp;quot;text/html&amp;quot;)

from django.shortcuts import get_object_or_404
get_object_or_404(klass, *args, **kwargs)
# 在给定的模型管理器调用get()，如果不存在引发Http404异常。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;基于类的视图&quot;&gt;&lt;a href=&quot;#基于类的视图&quot; class=&quot;headerlink&quot; title=&quot;基于类的视图&quot;&gt;&lt;/a&gt;基于类的视图&lt;/h1&gt;&lt;p&gt;基于类的视图的基类在django.views.generic中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.generic import View
def MyView(View):
    def get(self, request):
        return HttpResponse(...)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;TemplateResponse和SimpleTemplateResponse&quot;&gt;&lt;a href=&quot;#TemplateResponse和SimpleTemplateResponse&quot; class=&quot;headerlink&quot; title=&quot;TemplateResponse和SimpleTemplateResponse&quot;&gt;&lt;/a&gt;TemplateResponse和SimpleTemplateResponse&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.template.response import TemplateResponse, SimpleTemplateResponse
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;视图装饰器&quot;&gt;&lt;a href=&quot;#视图装饰器&quot; class=&quot;headerlink&quot; title=&quot;视图装饰器&quot;&gt;&lt;/a&gt;视图装饰器&lt;/h1&gt;&lt;p&gt;django.views.decorators包中定义了视图的装饰器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.decorators import *
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;内建的视图&quot;&gt;&lt;a href=&quot;#内建的视图&quot; class=&quot;headerlink&quot; title=&quot;内建的视图&quot;&gt;&lt;/a&gt;内建的视图&lt;/h1&gt;&lt;p&gt;django.views.static.serve定义了开发环境的文件服务器视图，仅用于开发。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.static import serve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;django.views.defaults定义了内建的错误处理的视图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.defaults import *
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;views-py&quot;&gt;&lt;a href=&quot;#views-py&quot; class=&quot;headerlink&quot; title=&quot;views.py&quot;&gt;&lt;/a&gt;views.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.shortcuts import render
&lt;/
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
      <category term="Django" scheme="http://canuxcheng.com/categories/Python/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django之Module</title>
    <link href="http://canuxcheng.com/2016/10/03/Django%E4%B9%8BModule/"/>
    <id>http://canuxcheng.com/2016/10/03/Django之Module/</id>
    <published>2016-10-03T20:20:31.000Z</published>
    <updated>2017-01-11T08:53:42.238Z</updated>
    
    <content type="html">&lt;h1 id=&quot;models-py&quot;&gt;&lt;a href=&quot;#models-py&quot; class=&quot;headerlink&quot; title=&quot;models.py&quot;&gt;&lt;/a&gt;models.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.db import models
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;django模型是和数据库关联的，代码放在models.py，数据库信息在settings.py中统一配置即可。&lt;/p&gt;
&lt;p&gt;每个模型对应数据库唯一的一张表，是django.db.models.Model的子类。&lt;/p&gt;
&lt;p&gt;每个模型实例代表数据库中的一条特定记录.&lt;/p&gt;
&lt;p&gt;模型的每个属性都表示为数据库中的一个字段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在项目的settings.py中激活应用，并设置数据库相关参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;让django包含你的应用：&lt;/p&gt;
&lt;p&gt;  告诉django你对模型做了更改，并且将这些更改存储为迁移文件polls/migrations/0001_initial.py:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py makemigrations polls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  可以查看迁移文件执行了哪些sql语句,并不真的在数据库执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py sqlmigrate polls 0001
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  可以检查项目中的模型是否存在问题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py check
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  在数据库中创建模型,查找还没有被应用的迁移文件然后和数据库同步：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;模型的字段类型和字段选项&quot;&gt;&lt;a href=&quot;#模型的字段类型和字段选项&quot; class=&quot;headerlink&quot; title=&quot;模型的字段类型和字段选项&quot;&gt;&lt;/a&gt;模型的字段类型和字段选项&lt;/h1&gt;&lt;p&gt;模型的每个属性都表示为数据库的一个字段,是Field子类的某个实例。&lt;/p&gt;
&lt;p&gt;模型的字段还有一些选项。&lt;/p&gt;
&lt;p&gt;字段命名规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能是python的保留关键字。&lt;/li&gt;
&lt;li&gt;字段名中连续的下划线不能超过一个。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;访问其它应用的模型,导入即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from &amp;lt;other-aplication&amp;gt;.models import &amp;lt;module-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模型字段类型和选项参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/documents/django_182/ref/models/fields.html#common-model-field-options&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.usyiyi.cn/documents/django_182/ref/models/fields.html#common-model-field-options&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;模型字段类型&quot;&gt;&lt;a href=&quot;#模型字段类型&quot; class=&quot;headerlink&quot; title=&quot;模型字段类型&quot;&gt;&lt;/a&gt;模型字段类型&lt;/h2&gt;&lt;p&gt;字段的类型都是Field类的子类：&lt;/p&gt;
&lt;p&gt;每个字段都接受一个可选的位置参数(一般是第一个），叫字段的自述名,如果不指定就默认是字段名字（下划线换成空格）。&lt;/p&gt;
&lt;p&gt;自增字段:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AutoField
# 默认django会每个模型添加一个自增主键字段,如果你显示设置一个自增主键字段就不会默认再添加,每个模型只能有一个主键字段。
# id = models.AutoField(primary_key=True)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;普通字段:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BigIntegerField
BinaryField
BooleanField
CharField
CommaSeparatedIntegerField
DateField
DateTimeField
DecimalField
DurationField
EmailField
FileField
FilePathField
FloatField
GenericIPAddressField
IPAddressField
ImageField
IntegerField
NullBooleanField
PositiveIntegerField
PositiveSmallIntegerField
SlugField
SmallIntegerField
TextField
TimeField
URLField
UUIDField
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关系字段:&lt;/p&gt;
&lt;p&gt;django定义了一系列字段类型描述数据库之间的关联:&lt;/p&gt;
&lt;p&gt;这三个字段要求第一个参数是模型类，用verbose_name选项才能指定自述名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ForeignKey 定义多对一关系
OneToOneField 定义一对一关系
ManyToManyField 定义多对多关系
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;模型字段选项&quot;&gt;&lt;a href=&quot;#模型字段选项&quot; class=&quot;headerlink&quot; title=&quot;模型字段选项&quot;&gt;&lt;/a&gt;模型字段选项&lt;/h2&gt;&lt;p&gt;django定义的字段的通用的选项：&lt;/p&gt;
&lt;p&gt;每个字段都有特定的选项，也有通用的选项,特定参数参考文档。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Field.null    django将空值以NULL存储到数据库中,默认是false
Field.blank    该字段允许为空白,默认false
Field.primary_key    true表示该字段为模型的主键字段,默认是false
Field.unique    true表示该字段在表中必须有唯一值,默认是false
Field.unique_for_date
Field.unique_for_month
Field.unique_for_year
Field.choices    可迭代结构,给字段提供选项
Field.default    该字段默认值
Field.help_text    额外的help文本
Field.editable    false表示该字段不会出现在admin,默认是true
Field.error_messages    重写默认抛出的错误信息
Field.verbose_name    该字段可读性更高的名称
Field.validators    该字段要运行的一个Validator的列表
Field.db_column
Field.db_index
Field.db_tablespace
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;模型元选项&quot;&gt;&lt;a href=&quot;#模型元选项&quot; class=&quot;headerlink&quot; title=&quot;模型元选项&quot;&gt;&lt;/a&gt;模型元选项&lt;/h1&gt;&lt;p&gt;使用内部类Meta定义模型的元数据。&lt;/p&gt;
&lt;p&gt;模型元数据是任何不是字段的数据，比如排序选项等。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.db import models
class Ox(models.Model):
    horn_length = models.IntegerField()
    ...
    class Meta:
        ordering = [&amp;quot;horn_length&amp;quot;]
        verbose_name_plural = &amp;quot;oxen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模型的元选项：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/ref/models/options.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.usyiyi.cn/translate/django_182/ref/models/options.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在元类Meta中使用的选项.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Options.abstract = True 表示模型是抽象基类, 数据库不会创建这个表
Options.db_table 该模型所用的数据表的名称
Options.db_tablespace
Options.default_related_name
Options.get_latest_by
Options.managed
Options.order_with_respect_to
Options.ordering = [&amp;apos;字段名&amp;apos;, &amp;apos;-字段名&amp;apos;] 对象的默认顺序, -表示倒序
Options.permissions
Options.default_permissions
Options.proxy
Options.select_on_save
Options.unique_together
Options.index_together
Options.verbose_name 对象的一个易于理解的名字
Options.verbose_name_plural 该对象复数形式的名字
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;模型的属性&quot;&gt;&lt;a href=&quot;#模型的属性&quot; class=&quot;headerlink&quot; title=&quot;模型的属性&quot;&gt;&lt;/a&gt;模型的属性&lt;/h1&gt;&lt;p&gt;模型的属性是表级别的,是对表的操作.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/ref/models/class.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.usyiyi.cn/translate/django_182/ref/models/class.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每个模型类都要添加一个Manager实例,如果不显示添加，django就会默认添加objects属性，包含Manager实例。&lt;/p&gt;
&lt;p&gt;Manager或object属性是模型进行数据库查询操作的接口,也叫管理器,用于从数据库获取实例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.db import models
class Foo(models.Model):
    # 显示添加
    bar = models.Manager()
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;执行查询&quot;&gt;&lt;a href=&quot;#执行查询&quot; class=&quot;headerlink&quot; title=&quot;执行查询&quot;&gt;&lt;/a&gt;执行查询&lt;/h1&gt;&lt;p&gt;一旦建立数据模型,django会自动生成一套抽象的API,用于创建,检索,更新和删除对象.&lt;/p&gt;
&lt;h2 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;q = Question(question_text=&amp;apos;content&amp;apos;, pub_date=&amp;apos;date&amp;apos;)
q.save()

q = Question(question_text=&amp;apos;content&amp;apos;)
q.pub_date=&amp;apos;date&amp;apos;
q.save()

Question.objects.create(question_text=&amp;quot;content&amp;quot;, pub_date=&amp;apos;date&amp;apos;)

# 防止重复,不存在就创建，返回(object, True),存在返回(object, False)
Question.objects.get_or_create(question_text=&amp;apos;content&amp;apos;, pub_date=&amp;apos;date&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;获取对象&quot;&gt;&lt;a href=&quot;#获取对象&quot; class=&quot;headerlink&quot; title=&quot;获取对象&quot;&gt;&lt;/a&gt;获取对象&lt;/h2&gt;&lt;p&gt;通过模型中的管理器构造一个查询集来从数据库获取对象.&lt;/p&gt;
&lt;p&gt;查询集求值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;迭代&lt;/li&gt;
&lt;li&gt;切片&lt;/li&gt;
&lt;li&gt;序列化&lt;/li&gt;
&lt;li&gt;repr()&lt;/li&gt;
&lt;li&gt;len()&lt;/li&gt;
&lt;li&gt;list()&lt;/li&gt;
&lt;li&gt;bool()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查询集参考QuerySet类的方法：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/ref/models/querysets.html#queryset-api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.usyiyi.cn/translate/django_182/ref/models/querysets.html#queryset-api&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 获取表中所有对象
Question.objects.all()
# 切片获取部分
Question.objects.all()[:10]
# 获取单个
Question.objects.get(question_text=&amp;apos;content&amp;apos;)
# 过滤
Question.objects.filter(**kwargs)
Question.objects.exclude(**kwargs)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询集的链式过滤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Question.objects.all().exists()
Question.objects.all().order_by(&amp;apos;name&amp;apos;)
Question.objects.filter(**kwargs).filter(**kwargs)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;模型的方法&quot;&gt;&lt;a href=&quot;#模型的方法&quot; class=&quot;headerlink&quot; title=&quot;模型的方法&quot;&gt;&lt;/a&gt;模型的方法&lt;/h1&gt;&lt;p&gt;模型的方法是对模型的实例的操作.&lt;/p&gt;
&lt;p&gt;模型中可以自定义方法，可以使用预定义的自动生成的方法，也可以覆盖预定义的方法。&lt;/p&gt;
&lt;p&gt;预定义方法参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/ref/models/instances.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.usyiyi.cn/translate/django_182/ref/models/instances.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Model.__unicode__()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;python2需要使用&lt;strong&gt;unicode&lt;/strong&gt;方法.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __unicode__(self):
    return u&amp;apos;%s&amp;apos; % self.title

Model.__str__()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;python3只需要&lt;strong&gt;str&lt;/strong&gt;方法.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __str__(self):
    return &amp;apos;%s&amp;apos; % self.title
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这段代码兼容python2和python3.&lt;/p&gt;
&lt;p&gt;python_2_unicode_compatible是一个用于类的装饰器，在类中定义&lt;strong&gt;str&lt;/strong&gt;并返回文本.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from __future__ import unicode_literals
from django.utils.encoding import python_2_unicode_compatible

@python_2_unicode_compatible
class Question(models.Model):
    title = models.CharField(&amp;apos;title&amp;apos;, max_length=256)
    ...

    def __str__(self):
        return self.title

Model.__eq__()

Model.__hash__()

Model.get_absolute_url()

Model.get_FOO_display()

Model.get_next_by_FOO(**kwargs)

Model.get_previous_by_FOO(**kwargs)

Model.DoesNotExist
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;models-py&quot;&gt;&lt;a href=&quot;#models-py&quot; class=&quot;headerlink&quot; title=&quot;models.py&quot;&gt;&lt;/a&gt;models.py&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.db import models
&lt;/cod
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
      <category term="Django" scheme="http://canuxcheng.com/categories/Python/Django/"/>
    
    
      <category term="django" scheme="http://canuxcheng.com/tags/django/"/>
    
      <category term="python" scheme="http://canuxcheng.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Django之Template</title>
    <link href="http://canuxcheng.com/2016/10/03/Django%E4%B9%8BTemplate/"/>
    <id>http://canuxcheng.com/2016/10/03/Django之Template/</id>
    <published>2016-10-03T20:12:49.000Z</published>
    <updated>2017-01-04T03:59:32.363Z</updated>
    
    <content type="html">&lt;h1 id=&quot;模板设置&quot;&gt;&lt;a href=&quot;#模板设置&quot; class=&quot;headerlink&quot; title=&quot;模板设置&quot;&gt;&lt;/a&gt;模板设置&lt;/h1&gt;&lt;p&gt;模板引擎在settings.py设置, django有两套模板引擎：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TEMPLATES = [
    # DjangoTemplates
    {
        &amp;apos;BACKEND&amp;apos;: &amp;apos;django.template.backends.django.DjangoTemplates&amp;apos;,
        # 定义项目的通用模板, mysite/templates
        &amp;apos;DIRS&amp;apos;: [os.path.join(BASE_DIR, &amp;apos;templates&amp;apos;)],
        # True 表示在所有安装应用的application/templates中查找。
        &amp;apos;APP_DIRS&amp;apos;: True,
        # 模板的选项：
        &amp;apos;OPTIONS&amp;apos;: {
        &amp;apos;context_processors&amp;apos;:
        &amp;apos;debug&amp;apos;:
        &amp;apos;loaders&amp;apos;:
        &amp;apos;string_if_invalid&amp;apos;:
        &amp;apos;file_charset&amp;apos;: &amp;apos;utf-8&amp;apos;
        },
    },

    # Jinja2
    {
        &amp;apos;BACKEND&amp;apos;: &amp;apos;django.template.backends.jinja2.Jinja2&amp;apos;,
        # 定义项目的通用模板, mysite/templates
        &amp;apos;DIRS&amp;apos;: [os.path.join(BASE_DIR, &amp;apos;templates&amp;apos;)],
        # True表示在所有已安装应用的application/jinja2中查找。
        &amp;apos;APP_DIRS&amp;apos;: True,
        # 模板的选项：
        &amp;apos;OPTIONS&amp;apos;: {
        &amp;apos;autoescape&amp;apos;: True
        &amp;apos;loader&amp;apos;:
        &amp;apos;auto_reload&amp;apos;:
        &amp;apos;undefined&amp;apos;:
        },
    },
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;BACKEND定义模板引擎,django内置的模板引擎有两个django.template.backends.django.DjangoTemplates(默认)和django.template.backends.jinja2.Jinja2&lt;/p&gt;
&lt;p&gt;DIRS存放自定义的不在应用路径的模板，模板引擎按列表顺序搜索查找模板源文件,默认就是默认引擎的默认路径。&lt;/p&gt;
&lt;p&gt;APP_DIRS告诉模板引擎是否进入安装应用的templates(jinja2的目录是jinja2)查找模板。&lt;/p&gt;
&lt;p&gt;在视图中使用模板：&lt;/p&gt;
&lt;p&gt;默认django会在项目的所有应用的templates中查找模板，所以为了防止多个应用有同名的模板，需要在templates下新建application同名的目录来存放模板&lt;/p&gt;
&lt;p&gt;应用的模板文件需要在应用目录创建templates文件夹&lt;/p&gt;
&lt;p&gt;默认模板放在polls/templates/polls/XXX.html&lt;/p&gt;
&lt;p&gt;应用的静态文件需要在应用目录创建static文件夹&lt;/p&gt;
&lt;p&gt;默认静态文件存放在polls/static/polls/XXX.css&lt;/p&gt;
&lt;p&gt;静态文件夹用来集中存放和管理图片，js脚本和css样式表等静态文件。&lt;/p&gt;
&lt;p&gt;django.template.loader定义了两个函数加载模板。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;get_template(template_name, dirs=&amp;lt;object object&amp;gt;, using=None)
select_template(template_name_list, dirs=&amp;lt;object object&amp;gt;, using=None)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;模板语言&quot;&gt;&lt;a href=&quot;#模板语言&quot; class=&quot;headerlink&quot; title=&quot;模板语言&quot;&gt;&lt;/a&gt;模板语言&lt;/h1&gt;&lt;p&gt;django模板语言由四部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;li&gt;标签&lt;/li&gt;
&lt;li&gt;过滤器&lt;/li&gt;
&lt;li&gt;评论&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;{{ var }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示字符串：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string = &amp;quot;test string&amp;quot;
return render(request, &amp;apos;index.html&amp;apos;, {&amp;apos;string&amp;apos;: string})

{{ string }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示字典：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dict = {&amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;: &amp;quot;value2&amp;quot;}
return render(request, &amp;apos;index.html&amp;apos;, {&amp;apos;dict&amp;apos;: dict})

{{ dict.name1 }}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;标签&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;{% tag %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考内置标签：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/ref/templates/builtins.html#ref-templates-builtins-tags&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.usyiyi.cn/translate/django_182/ref/templates/builtins.html#ref-templates-builtins-tags&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;for标签：&lt;/p&gt;
&lt;p&gt;遍历列表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list = [&amp;apos;val1&amp;apos;, &amp;apos;val2&amp;apos;, &amp;apos;val3&amp;apos;]
return render(request, &amp;apos;index.html&amp;apos;, {&amp;apos;list&amp;apos;: &amp;apos;list&amp;apos;})

&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% for i in list %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; i &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endfor %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;遍历字典：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% for key, value in dict.items %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; key &amp;#125;&amp;#125;: &amp;#123;&amp;#123; value &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endfor %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;empty列表可能为空：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% for i in list %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% empty %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endfor %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reversed反向循环：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% for i in list reversed %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;for循环有用的变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;forloop.counter    # 1 - indexed
forloop.counter0    # 0 - indexed
forloop.revcounter    # 1 - indexed
forloop.revcounter0    # 0 - indexed
forloop.first
forloop.last
forloop.parentloop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% if expression %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% else %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endif %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if可用的布尔操作符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% if expression1 and expression2 %}
{% if not expression %}
{% if expression1 or expression2 %}
{% if not expression1 or expression2 %} # not优先级高于or
{% if expression1 and not expression2 %} # not优先级高于and
{% if expression1 and expression2 or expression3 %} # and优先级高于or
{% if var == value %}
{% if var != value %}
{% if var &lt; value %}
{% if var &gt; value %}
{% if var &lt;= value=&quot;&quot; %}=&quot;&quot; {%=&quot;&quot; if=&quot;&quot; var=&quot;&quot;&gt;= value %}
{% if var in value %}
{% if a &gt; b and b &gt; c %}
{% if var|filter&quot;arguments expression %} # if中使用过滤器
&lt;/=&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;布尔操作符的优先级：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;or
and
not
in
==, !=, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;include标签：&lt;/p&gt;
&lt;p&gt;加载模板并以标签内的参数渲染。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% include &#39;XXX.html&#39; %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;load标签：&lt;/p&gt;
&lt;p&gt;加载自定义模板标签集。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% load foo bar from somelibrary %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;now标签：&lt;/p&gt;
&lt;p&gt;显示最近的日期和事件。&lt;/p&gt;
&lt;p&gt;spaceless标签：&lt;/p&gt;
&lt;p&gt;删除html标签之间的空白格，包括制表符和换行。&lt;/p&gt;
&lt;p&gt;url标签：&lt;/p&gt;
&lt;p&gt;返回一个绝对路径的引用，该引用匹配一个给定的视图函数和一些可选的参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% &#39;some-url-name&#39; v1 v2 %}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;模板继承&quot;&gt;&lt;a href=&quot;#模板继承&quot; class=&quot;headerlink&quot; title=&quot;模板继承&quot;&gt;&lt;/a&gt;模板继承&lt;/h3&gt;&lt;p&gt;block标签：&lt;/p&gt;
&lt;p&gt;在底层模板定义一些通用的内容，block标签可以被子模板覆盖。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% block XXX %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is default content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endblock %&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;extends标签：&lt;/p&gt;
&lt;p&gt;表示当前模板继承自父模板。&lt;/p&gt;
&lt;p&gt;extends标签必须放在子模板第一行。&lt;/p&gt;
&lt;p&gt;extends用来调用底层的模板，然后修改block标签内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% extends &quot;XXX.html&quot;/variable %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% block XXX %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is rewrite content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endblock %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;block.super:&lt;/p&gt;
&lt;p&gt;如果需要获取父模板的block中的内容，可以用block.super。&lt;/p&gt;
&lt;p&gt;可以在父模板的block中增加内容，而不是完全覆盖。&lt;/p&gt;
&lt;h2 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;{{ var|filter:arguments }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考内置过滤器&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://python.usyiyi.cn/translate/django_182/ref/templates/builtins.html#ref-templates-builtins-filters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python.usyiyi.cn/translate/django_182/ref/templates/builtins.html#ref-templates-builtins-filters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;add过滤器：&lt;/p&gt;
&lt;p&gt;把add后的参数加给value。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|add:&quot;2&quot; }} # value -&amp;gt; value+2
{{ value|addslashes }} # &amp;quot;I&amp;apos;m string&amp;quot; -&amp;gt; &amp;quot;I\&amp;apos;m string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;addslashed过滤器：&lt;/p&gt;
&lt;p&gt;在引号前面加\&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|addslashes }} # I&amp;apos;m canux -&amp;gt; I\&amp;apos;m canux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;capfirst过滤器：&lt;/p&gt;
&lt;p&gt;变量的第一个字母大写。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|capfirst }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;center过滤器：&lt;/p&gt;
&lt;p&gt;使value在给定的宽度范围内居中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|center:&quot;15&quot; }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;cut过滤器：&lt;/p&gt;
&lt;p&gt;移除value中所有的与给出的变量相同的字符串。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|cut:&quot;cut&quot; }} # 移除value中的字符串&amp;quot;cut&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;date过滤器：&lt;/p&gt;
&lt;p&gt;根据给定格式对一个date变量格式化。&lt;/p&gt;
&lt;p&gt;default过滤器：&lt;/p&gt;
&lt;p&gt;给value设定默认值，如果value没有赋值，就用默认值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|default:&quot;default-value&quot; }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;default_if_none过滤器：&lt;/p&gt;
&lt;p&gt;仅当value是None使用默认值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value:default_if_none:&quot;nothing&quot; }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dictsort过滤器：&lt;/p&gt;
&lt;p&gt;dictsortreversed过滤器：&lt;/p&gt;
&lt;p&gt;divisibleby过滤器：&lt;/p&gt;
&lt;p&gt;如果value可以被给出的参数整除，返回True。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ value|divisibleby:&quot;3&quot; }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;escape过滤器：&lt;/p&gt;
&lt;p&gt;escapejs过滤器：&lt;/p&gt;
&lt;p&gt;filesizeformat过滤器：&lt;/p&gt;
&lt;p&gt;格式化为人类可读的文件大小。&lt;/p&gt;
&lt;p&gt;first过滤器：&lt;/p&gt;
&lt;p&gt;返回迭代器的第一个元素。&lt;/p&gt;
&lt;p&gt;floatformat过滤器：&lt;/p&gt;
&lt;p&gt;force_escape过滤器：&lt;/p&gt;
&lt;p&gt;get_digit过滤器：&lt;/p&gt;
&lt;p&gt;iriencode过滤器：&lt;/p&gt;
&lt;p&gt;join过滤器：&lt;/p&gt;
&lt;p&gt;last过滤器：&lt;/p&gt;
&lt;p&gt;length过滤器：&lt;/p&gt;
&lt;p&gt;length_is过滤器：&lt;/p&gt;
&lt;p&gt;linebreaks过滤器：&lt;/p&gt;
&lt;p&gt;linebreaksbr过滤器：&lt;/p&gt;
&lt;p&gt;linenumbers过滤器：&lt;/p&gt;
&lt;p&gt;ljust过滤器：&lt;/p&gt;
&lt;p&gt;lower过滤器：&lt;/p&gt;
&lt;p&gt;把字符串转换成小写。&lt;/p&gt;
&lt;p&gt;make_list过滤器：&lt;/p&gt;
&lt;p&gt;phone2numeric过滤器：&lt;/p&gt;
&lt;p&gt;pluralize过滤器：&lt;/p&gt;
&lt;p&gt;pprint过滤器：&lt;/p&gt;
&lt;p&gt;random过滤器：&lt;/p&gt;
&lt;p&gt;romevetags过滤器：&lt;/p&gt;
&lt;p&gt;rjust过滤器：&lt;/p&gt;
&lt;p&gt;slice过滤器：&lt;/p&gt;
&lt;p&gt;slugify过滤器：&lt;/p&gt;
&lt;p&gt;stringformat过滤器：&lt;/p&gt;
&lt;p&gt;striptags过滤器：&lt;/p&gt;
&lt;p&gt;time过滤器：&lt;/p&gt;
&lt;p&gt;timesince过滤器：&lt;/p&gt;
&lt;p&gt;timeuntil过滤器：&lt;/p&gt;
&lt;p&gt;title过滤器：&lt;/p&gt;
&lt;p&gt;truncatechars过滤器：&lt;/p&gt;
&lt;p&gt;truncatechars_html过滤器：&lt;/p&gt;
&lt;p&gt;truncatewords过滤器：&lt;/p&gt;
&lt;p&gt;truncatewords_html过滤器;&lt;/p&gt;
&lt;p&gt;unordered_list过滤器：&lt;/p&gt;
&lt;p&gt;upper过滤器：&lt;/p&gt;
&lt;p&gt;将字符串转换成大写形式。&lt;/p&gt;
&lt;p&gt;urlencode过滤器：&lt;/p&gt;
&lt;p&gt;urlize过滤器：&lt;/p&gt;
&lt;p&gt;urlizetrunc过滤器：&lt;/p&gt;
&lt;p&gt;wordcount过滤器：&lt;/p&gt;
&lt;p&gt;wordwrap过滤器：&lt;/p&gt;
&lt;p&gt;yesno过滤器：&lt;/p&gt;
&lt;p&gt;i18n过滤器：&lt;/p&gt;
&lt;p&gt;l10n过滤器：&lt;/p&gt;
&lt;p&gt;tz过滤器：&lt;/p&gt;
&lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;p&gt;单行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;# this is single line comment #&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;多行注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% comment %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;line1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;line2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endcomment %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;自动html转义&quot;&gt;&lt;a href=&quot;#自动html转义&quot; class=&quot;headerlink&quot; title=&quot;自动html转义&quot;&gt;&lt;/a&gt;自动html转义&lt;/h1&gt;&lt;p&gt;当从模板生成html时，值可能包含影响html最终呈现的字符。&lt;/p&gt;
&lt;p&gt;django的自动转义,默认是打开的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt; 转义成 &amp;amp;lt;
&amp;gt; 转义成 &amp;amp;gt;
&amp;apos; 转义成 &amp;amp;#39
&amp;quot; 转义成 &amp;amp;quot;
$ 转义成 &amp;amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不需要自动转义可以关闭它&lt;/p&gt;
&lt;p&gt;可以用safe过滤器关闭独立变量中的自动转义：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data = &amp;lt;b&amp;gt;
{{ data }} -&amp;gt; &amp;amp;lt;b&amp;amp;gt;
{{ data|safe }} -&amp;gt; &amp;lt;b&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以用autoescape标签关闭模板代码中的自动转义：&lt;/p&gt;
&lt;p&gt;autoescape标签有off和on两个参数，表示关闭和打开自动转义。&lt;/p&gt;
&lt;p&gt;父模板中的autoescape可以被子模板继承，也可以被include标签包含的模板继承。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% autoescape off %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; name &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;% endautoescape %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模板设置&quot;&gt;&lt;a href=&quot;#模板设置&quot; class=&quot;headerlink&quot; title=&quot;模板设置&quot;&gt;&lt;/a&gt;模板设置&lt;/h1&gt;&lt;p&gt;模板引擎在settings.py设置, django有两套模板引擎：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TEMPLATES = 
    
    </summary>
    
      <category term="Python" scheme="http://canuxcheng.com/categories/Python/"/>
    
      <category term="Django" scheme="http://canuxcheng.com/categories/Python/Django/"/>
    
    
      <category term="django" scheme="http://canuxcheng.com/tags/django/"/>
    
      <category term="python" scheme="http://canuxcheng.com/tags/python/"/>
    
  </entry>
  
</feed>
